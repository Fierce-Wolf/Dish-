function htmlspecialchars(html) {
      html = html.replace(/&/g, "&amp;");
      html = html.replace(/</g, "&lt;");
      html = html.replace(/>/g, "&gt;");
      html = html.replace(/"/g, "&quot;");
      return html;
}
var shars = null;
var ellle = 0;



function getRandomInt(min, max)	{
	  return Math.floor(Math.random() * (max - min + 1)) + min;
	}



var chart_update_interval = 10;



var __STORAGE_PREFIX = "petridish__";

function LS_getValue(aKey, aDefault) {
	var val = localStorage.getItem(__STORAGE_PREFIX + aKey);
	if (null === val && 'undefined' != typeof aDefault) return aDefault;
	return val;
}
 
function LS_setValue(aKey, aVal) {
	localStorage.setItem(__STORAGE_PREFIX + aKey, aVal);
}

function GetRgba(hex_color, opacity)
{
    var patt = /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})$/;
    var matches = patt.exec(hex_color);
    return "rgba("+parseInt(matches[1], 16)+","+parseInt(matches[2], 16)+","+parseInt(matches[3], 16)+","+opacity+")";
}

function secondsToHms(d) 
{
    d = Number(d);
    var h = Math.floor(d / 3600);
    var m = Math.floor(d % 3600 / 60);
    var s = Math.floor(d % 3600 % 60);
    return ((h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + m + ":" + (s < 10 ? "0" : "") + s);
}

var chart = null;
var chart_data = [];
var chart_counter = 0;
var stat_canvas = null;

var stats = null;
var my_cells = null;
var my_color = "#ff8888";
var pie = null;
var stats_chart;

var display_chart = LS_getValue('display_chart', 'true') === 'true';
var display_stats = LS_getValue('display_stats', 'false') === 'true';






jQuery(document).ready(function() {




var insertt = '';

   // jQuery('#overlays').append(insertt);








    //jQuery('#stats').hide(0);   
    //jQuery('#serverstats').hide(0);   
    //jQuery('#statssmall').hide(0);   
    //jQuery('#stats').hide(0);  
    window.livekills = jQuery('#livekills');
});




function sharethis(record, server) {

 var title = 'My top score! ';
 var description = 'I have scored ' + record + ' mass at the petridish.pw game at the ' + server + ' server! Go with we?';
 var descriptiontwi = 'I have scored ' + record + ' mass at the petridish.pw game! Go with we?';
 var gameurl = encodeURI('http://petridish.pw');
 var imageurl = 'http://petridish.pw/petri.jpg';
 var hashtags = 'petridish,agar,agario';
 var vktext = 'Post to vk.com';
 var fbtext = 'Share on Facebook';
 var twtext = 'Tweet this!';
 var maintext = 'Share this result';

if (settedlang == 'ru') {
 title = 'Мой рекорд! ';
 description = 'Я набрал ' + record + ' массы в игре petridish.pw на сервере ' + server + ', го со мной?';
 descriptiontwi = 'Я набрал ' + record + ' массы в игре petridish.pw - го со мной?';
 vktext = 'Сохранить в Вконтакте';
 fbtext = 'Поделиться ссылкой в Фейсбуке';
 twtext = 'Поделиться ссылкой в Твиттере';
 maintext = 'Поделиться результатом';
}

var output = '<ul>';

output += '<li class=""><a href="http://vkontakte.ru/share.php?url=' + gameurl + '&title=' + title + '&description=' + description + '&image=' + imageurl + '&noparse=true" onclick="window.open(this.href, this.title, `toolbar=0, status=0, width=548, height=325`); return false" title="' + vktext + '" target="_parent"><span class="icon"><i class="mdi mdi-vk"></i></span><span class="text" data-name="ВКонтакте"></span></a></li>';

output += '<li class=""><a href="http://www.facebook.com/sharer.php?s=100&p[url]=' + gameurl + '&p[title]=' + title + '&p[summary]=' + description + '&p[images][0]=' + imageurl + '" onclick="window.open(this.href, this.title, `toolbar=0, status=0, width=548, height=325`); return false" title="' + fbtext + '" target="_parent"><span class="icon"><i class="mdi mdi-facebook"></i></span><span class="text" data-name="Facebook"></span></a></li>';

output += '<li class=""><a href="http://twitter.com/share?text=' + title + descriptiontwi + '&hashtags=' + hashtags + '&url=' + gameurl + '" onclick="window.open(this.href, this.title, `toolbar=0, status=0, width=548, height=325`); return false" target="_parent" title="' + twtext + '"><span class="icon"><i class="mdi mdi-twitter"></i></span><span class="text" data-name="Twitter"></span></a></li>';

output += '</ul><span>– ' + maintext + '</span>';

return output;

}









function OnChangeDisplayStats(display)
{
    LS_setValue('display_stats', display ? 'true' : 'false');
    display_stats = display;
    RenderStats(false);
}



function ResetStats()
{
    stats = {
        pellets: {num:0, mass:0},
        w: {num:0, mass:0},
        cells: {num:0, mass:0},
        viruses: {num:0, mass:0},

        birthday: Date.now(),
        time_of_death: null,
        high_score: 0,
        top_slot: Number.POSITIVE_INFINITY,

        gains: {},
        losses: {},
    };
}

function OnGainMass(me, other) {



    var mass = Math.floor((other.size * other.size)/100);
    if (other.isVirus){
        stats.viruses.num++;
        stats.viruses.mass += mass; //TODO: shouldn't add if  game mode is teams
    }
    else if (other.cellType == 1){
        stats.pellets.num++;
        stats.pellets.mass += mass;
    }
	// heuristic to determine if mass is 'w', not perfect
    else if (other.cellType == 3){
        if (other.color != me.color){ //dont count own ejections, again not perfect
            stats.w.num++;
            stats.w.mass += mass;

        }
    }
    else if (other.cellType == 0){

	//not perfect i know but still better than it was
	if ((other.color != me.color) && (other.name != me.name)) {
        var key = other.name + ':' + other.color;
        stats.cells.num++;
        stats.cells.mass += mass;
        if (stats.gains[key] == undefined)
            stats.gains[key] = {num: 0, mass: 0};
        stats.gains[key].num++;
        stats.gains[key].mass += mass;
        stats.gains[key].skin = other.skin;

	}
    }
}

function OnLoseMass(me, other) {
	if ((other.color != me.color) && (other.name != me.name)) {
    var mass = Math.floor((me.size * me.size)/100);
    var key = other.name + ':' + other.color;
    if (stats.losses[key] == undefined)
        stats.losses[key] = {num: 0, mass: 0};;
    stats.losses[key].num++;
    stats.losses[key].mass += mass;
    stats.losses[key].skin += other.skin;
	}
}

function DrawPie(pellet, w, cells, viruses, numpellet, numw, numcells, numviruses) {



            CanvasJS.addColorSet("PetryColor",
                [
                "#FF268D",
                "#17EE0F",
                "#FF6C00",
                "#266FFF"              
                ]);
   // var pelletst = "Гранула";
  //  var cellst = "Клетки";
  //  var masst = "Масса";
  //  var virusest = "Вирус";
    var total = pellet + w + cells + viruses;
    if (total > 0) {
    pie = new CanvasJS.Chart("donutchart", {
        width: 150,
        height: 150,
        title: null,
        animationEnabled: false,
        colorSet: "PetryColor",

        data: [{        
            type: "doughnut",      
            startAngle:-20,      
            showInLegend: false,
            toolTipContent:"{legendText} {y}%",
            dataPoints: [
                {  y: 100*pellet/total, legendText: numpellet + " " + pelletst + "       +" + pellet + " " + masst + ")"},
                {  y: 100*cells/total, legendText: numcells + " " + cellst + "       +" + cells + " " + masst + ")"},
                {  y: 100*w/total, legendText: numw + " w       +" + w + " " + masst + ")"},
                {  y: 100*viruses/total, legendText: numviruses + " " + virusest + "       +" + viruses + " " + masst + ")"},
            ]
        }]
    });
 
 
    pie.render();  



}

    var legendtext = '<p><span class="round purple"></span><span class="value">' + numpellet + " " + pelletst + '</span><span class="mass">+' + pellet + " " + masst + '</span></p>';
    legendtext += '<p><span class="round green"></span><span class="value">' + numcells + " " + cellst + '</span><span class="mass">+' + cells + " " + masst + '</span></p>';
    legendtext += '<p><span class="round orange"></span><span class="value">' + numw + ' w</span><span class="mass">+' + w + " " + masst + '</span></p>';
    legendtext += '<p><span class="round blue"></span><span class="value">' + numviruses + " " + virusest + '</span><span class="mass">+' + viruses + " " + masst + '</span></p>';
	$("#gameresultlegend").html(legendtext);

 
};



function GetTopN(n, p)
{
	var r = [];
	var a = Object.keys(stats[p]).sort(function(a, b) {return -(stats[p][a].mass - stats[p][b].mass)});
    for (var i = 0; i < n && i < a.length; ++i){
        var key = a[i];
        var mass = stats[p][key].mass;
        var skin = stats[p][key].skin;
        var name = key.slice(0,key.length-8);
        if (!name) name = "An unnamed cell";
        var color = key.slice(key.length-7);
		r.push({name:name, color:color, skin:skin, mass:Math.floor(mass)});
    }	
	return r;
}

function AppendTopN(n, p, list)
{
	var a = GetTopN(n,p);
    for (var i = 0; i < a.length; ++i){
        var text = '<span class="name">' + htmlspecialchars(a[i].name) + '</span><span>' + (p == 'gains' ? '+' : '-') + a[i].mass + '</span>';
	var skinfile = '/img/skin-temp.png"';
	if (a[i].skin) {
		skinfile = '/serverskins/' + a[i].skin + '.png"';
	}
        list.append('<li><img src="/engine' + skinfile + ' alt="" style="background-color: ' + a[i].color + ';">' + text + '</li>');
    }
	return a.length > 0;
}





function showtoppers() {
	$("#seervertops #toppers tr").show();
	$('#seervertops .top-serv-header a').eq(0).hide();
}

function showtopclans() {
	$("#seervertops #topclans tr").show();
	$('#seervertops .top-serv-header a').eq(1).hide();
}



function DrawStats(game_over) {
	//deathTollCheck(10);
	//console.log(stats);
	if (!stats) return;
	jQuery('.victim ul').empty();
	jQuery('.heroes ul').empty();
	if (game_over){
		//settingsclose();
		$('#menuoverlay').hide();
		$('#endgameoverlay,#gameoverlay').show();
		if (pvpmode) {
			$("#agbs, #agbp, #agbpsolo, #agbr").hide();
			$("#agbm").removeClass('outline').css('margin-left', '30px').css('padding-right','180px').css('float','none');

			if (lastactiveserverbeforepvp) {
				$("#agbm").css('float','left').css('padding-right','15px').css('margin-left', '0px').css('margin-right', '3px');
				$("#agbr").show();
				var newtxt = munutext + ' / PvP Lobby';
				$("#agbm span").html(newtxt);

				var newtxtr = returntotext + ' ' + lastactiveserverbeforepvp;
				$("#agbr span").html(newtxtr);

			}
		}
		if (!pvpmode) {
			$("#agbr").hide();
			$("#agbs, #agbp, #agbpsolo").show();
			if (solomode == 1) { 
			//	$("#agbp").hide();
			}
			if (solomode == 0) { 
				$("#agbpsolo").hide();
			}
			$("#agbm").addClass('outline').css('margin-left', '0px').css('padding-right','15px').css('float','left');
			$("#agbm span").html(munutext);
		}
		
		$('.fill').addClass('gameover');
		var srrv = currentmode + ' #' + currentmodenumber;
		var soname = '';
		var bba = currentsname;
		if (bba.length > 1) {
		 bba = bba.substr(0,bba.length-3);
		 soname = ' (' + bba + ')';
		}
		$("#sername").html('<a href="globalstatistics/server-' + currentserverid + '.php" title="" target="_blank">' + srrv+soname + '</a>');

		loadstats("today");
		// here


	        stats.time_of_death = Date.now();
	}
	var time = stats.time_of_death ? stats.time_of_death : Date.now();
	var seconds = (time - stats.birthday)/1000;

	$(".stat-result .data").eq(0).html(secondsToHms(seconds));
	$(".stat-result .data").eq(1).html(~~(stats.high_score/100));

	var posaa = nopet;
	if (stats.top_slot == Number.POSITIVE_INFINITY) {
		posaa = nopet;
	}
	else {
		posaa = stats.top_slot;
	}
	//console.log(posaa);

	$(".stat-result .data").eq(2).html(posaa);

    
	var srrv = currentmode + ' №' + currentmodenumber;
	var soname = '';
	var bba = currentsname;
	if (bba.length > 1) {
	 bba = bba.substr(0,bba.length-3);
	 soname = ' (' + bba + ')';
	}

	$(".stat-game-serv .login").html(htmlspecialchars(settednick));
	$(".stat-game-serv .serv-name").html(srrv + soname);

	//console.log('111',srrv);
	var sha = sharethis(~~(stats.high_score/100), srrv);
	$('.share-result').html(sha);




	DrawPie(stats.pellets.mass, stats.w.mass, stats.cells.mass, stats.viruses.mass, stats.pellets.num, stats.w.num, stats.cells.num, stats.viruses.num);


	list = jQuery('<div>');
	if (AppendTopN(5, 'gains', list))
		jQuery('.victim ul').append(list);
	else
		jQuery('.victim ul').append('<li style="font-size: 12px; ">' + noeatt + '</li>');


	list = jQuery('<div>');
	if (AppendTopN(5, 'losses', list))
		jQuery('.heroes ul').append(list);
	else
		jQuery('.heroes ul').append('<li style="font-size: 12px; ">' + noeatyout + '</li>');
	

	if (!pvpmode) {
		if ((seconds <= 3) && (game_over)) { 
			if (solomode == 1) {
				goplaytower(); 
			}
			if (solomode == 0) {
				yohoho(); 
			}
		}
	}
}



var styles = {
	heading: {font:"30px Ubuntu", spacing: 41, alpha: 1},
	subheading: {font:"25px Ubuntu", spacing: 31, alpha: 1},
	normal: {font:"17px Ubuntu", spacing: 21, alpha: 0.6}
}

var g_stat_spacing = 0;
var g_display_width = 220;
var g_layout_width = g_display_width;

function AppendText(text, context, style)
{
	context.globalAlpha = styles[style].alpha;
	context.font = styles[style].font;
	g_stat_spacing += styles[style].spacing;
    
    var width = context.measureText(text).width;
    g_layout_width = Math.max(g_layout_width, width);    
	context.fillText(text, g_layout_width/2 - width/2, g_stat_spacing);
}

function RenderStats(reset)
{
	if (reset) g_layout_width = g_display_width;
	if (!display_stats || !stats) return;
	g_stat_spacing = 0;	
	
	var gains = GetTopN(3, 'gains');
	var losses =  GetTopN(3, 'losses');
	var height = 30 + styles['heading'].spacing + styles['subheading'].spacing * 2 + styles['normal'].spacing * (4 + gains.length + losses.length);
		
	stat_canvas = document.createElement("canvas");
	var scale = Math.min(g_display_width, .3 * window.innerWidth) / g_layout_width;
	stat_canvas.width = g_layout_width * scale;
    stat_canvas.height = height * scale;
	var context = stat_canvas.getContext("2d");
	context.scale(scale, scale);
		
    context.globalAlpha = .4;
    context.fillStyle = "#000000";
    context.fillRect(0, 0, g_layout_width, height);
        
    context.fillStyle = "#FFFFFF";
	AppendText(statst, context, 'heading');

	var text = stats.pellets.num + " " + pelletst + " (" + ~~(stats.pellets.mass) + ")";
	AppendText(text, context,'normal');		
	text = stats.w.num + " w (" + ~~(stats.w.mass) + ")";
	AppendText(text, context,'normal');
    text = stats.cells.num + " " + cellst + " (" + ~~(stats.cells.mass) + ")";
	AppendText(text, context,'normal');
	text = stats.viruses.num + " " + virusest + " (" + ~~(stats.viruses.mass) + ")";
	AppendText(text, context,'normal');
		
	AppendText(topgt,context,'subheading');
	for (var j = 0; j < gains.length; ++j){
		text = (j+1) + ". " + htmlspecialchars(gains[j].name) + " (" + gains[j].mass + ")";
		context.fillStyle = gains[j].color;			
		AppendText(text, context,'normal');
	}
		
	context.fillStyle = "#FFFFFF";
	AppendText(toplt,context,'subheading');
	for (var j = 0; j < losses.length; ++j){
		text = (j+1) + ". " + htmlspecialchars(losses[j].name) + " (" + losses[j].mass + ")";
		context.fillStyle = losses[j].color;			
		AppendText(text, context,'normal');
	}
}  

jQuery(window).resize(function() {
    RenderStats(false);
});
var my_cellls = null;

window.OnGameStart = function(cells)
{
    shars = cells;
    ResetStats();
    RenderStats(true);

}

window.OnShowOverlay = function(game_in_progress) {
    DrawStats(!game_in_progress);
}

window.OnUpdateMass = function(mass) {
    stats.high_score = Math.max(stats.high_score, mass);
}

window.OnCellEaten = function(predator, prey) {
	var name1 = predator.name;
	var name2 = prey.name;
	if(name1 == '') { name1 = 'An unnamed cell';  }
	if(name2 == '') { name2 = 'An unnamed cell';  }
	var thismass = Math.floor((prey.size * prey.size)/100);
	var someEated = false;

	if (battlelog) {

	if ((prey.cellType == 0) && (!prey.isVirus) && (name1 != name2)) {
		livekills.append('<div class="battlelog"><strong style="color:' + predator.color + '">' + htmlspecialchars(name1) + '</strong> eats <strong style="color:' + prey.color + '">' + htmlspecialchars(name2) + '</strong> (+' + thismass  + ' mass)</div>'); 
		someEated = true;

	}
	if (prey.isVirus) {
		livekills.append('<div class="battlelog"><strong style="color:' + predator.color + '">' + htmlspecialchars(name1) + '</strong> eats a <strong style="color:green;">virus</strong> (+' + thismass  + ' mass)</div>'); 
		someEated = true;

	}

	if (someEated && livekills.find('.battlelog:visible').length > 5) { jQuery('.battlelog:visible').eq(0).hide(); }
	if (someEated && livekills.find('.battlelog').length > 50) { jQuery('.battlelog').eq(0).remove(); }


	}

    if (!shars) return;

    if (shars.indexOf(predator) != -1){

	if (prey.name != '') { 
	}



        OnGainMass(predator, prey);
        RenderStats(false);
    }
    if (shars.indexOf(prey) != -1){
        OnLoseMass(prey, predator);
        RenderStats(false);
    }    
}

window.OnLeaderboard = function(position) {
    stats.top_slot = Math.min(stats.top_slot, position);
}

window.OnDraw = function(context) {
    display_stats && stat_canvas && context.drawImage(stat_canvas, 10, 10);   
}

var yesterdayloaded = 0;
var twodaysloaded = 0;




loadstats = function(interval,override) { 
  if (interval == "today")  {
	time=new Date();
	var statspref = currentstats;
	statspref += '-stats-' + datefromserver + '.txt?' + Math.random();
	var difff = time - loaddate;
	if ((difff > 30000) || (override === true))  {
	$("#seervertops .top-serv-content").empty();
	$("#seervertops .top-serv-content").load("//stat.petridish.pw/stats/final/" + statspref, function(response, status, xhr) {

  if ( status == "error" ) {
    var msg = "No top data yet";
    $( "#statstoday" ).html( msg  ).show();
  }

	 var pers = $(".top-serv-content #toppers tr").length;
	 if (pers > 5) { 
		$('#seervertops .top-serv-header').eq(0).append('<a onclick="showtoppers();">'  + showallt +  '</a>'); 
	 }
	 var claans = $("#seervertops .top-serv-content #topclans tr").length;
	 if (claans > 5) { 
		$('#seervertops .top-serv-header').eq(1).append('<a onclick="showtopclans();">'  + showallt +  '</a>'); 
	 }
	 loaddate = new Date();
	 var ddd = $("#seervertops #toppers").html();
	 $('#ingameplayerstats #toppers').html(ddd);

	 var bbb = $("#seervertops #topclans").html();
	 $('#ingameclanstats #topclans').html(bbb);

	$('#ingameserverstats .top-serv-header a').show();

	 console.log("Updating server stats");
		});

	}


 }



  if (interval == "yesterday")  {
	var statspref = currentstats;
	statspref += '-stats-' + datefromserveryesterday + '.txt?' + Math.random();
     if (yesterdayloaded != 1) {
	$("#seervertops .top-serv-content").empty();
	$("#seervertops .top-serv-content").load("//stat.petridish.pw/stats/final/" + statspref, function() {
	 var pers = $("#seervertops .top-serv-content #toppers tr").length;
	 if (pers > 5) { 
		$('#seervertops .top-serv-header').eq(0).append('<a onclick="showtoppers();">'  + showallt +  '</a>'); 
	 }
	 var claans = $("#seervertops .top-serv-content #topclans tr").length;
	 if (claans > 5) { 
		$('#seervertops .top-serv-header').eq(1).append('<a onclick="showtopclans();">'  + showallt +  '</a>'); 
	 }
	 var ddd = $("#seervertops #toppers").html();
	 $('#ingameplayerstats #toppers').html(ddd);

	 var bbb = $("#seervertops #topclans").html();
	 $('#ingameclanstats #topclans').html(bbb);
	$('#ingameserverstats .top-serv-header a').show();
	 console.log("Updating yesterday server stats");
	// yesterdayloaded = 1;
	});
     }


 }




  if (interval == "twodays")  {
	var statspref = currentstats;
	statspref += '-stats-' + datefromserveryesterdaymore + '.txt?' + Math.random();
     if (twodaysloaded != 1) {
	$("#seervertops .top-serv-content").empty();
	$("#seervertops .top-serv-content").load("//stat.petridish.pw/stats/final/" + statspref, function() {
	 var pers = $("#seervertops .top-serv-content #toppers tr").length;
	 if (pers > 5) { 
		$('#seervertops .top-serv-header').eq(0).append('<a onclick="showtoppers();">'  + showallt +  '</a>'); 
	 }
	 var claans = $("#seervertops .top-serv-content #topclans tr").length;
	 if (claans > 5) { 
		$('#seervertops .top-serv-header').eq(1).append('<a onclick="showtopclans();">'  + showallt +  '</a>'); 
	 }
	 var ddd = $("#seervertops #toppers").html();
	 $('#ingameplayerstats #toppers').html(ddd);

	 var bbb = $("#seervertops #topclans").html();
	 $('#ingameclanstats #topclans').html(bbb);
	$('#ingameserverstats .top-serv-header a').show();
	 console.log("Updating 2yesterday server stats");
	// twodaysloaded = 1;
	});
     }





 }




  if (interval == "currentyear")  {
	time=new Date();
	var statspref = currentstats;
	statspref += '-currentyear.txt?' + Math.random();
	var difffa = time - alltimeloaddate;
	if ((difffa > 600000) || (override === true))  {
	$("#seervertops .top-serv-content").empty();
	$("#seervertops .top-serv-content").load("//stat.petridish.pw/stats/currentyear/" + statspref, function() {
	 var pers = $("#seervertops .top-serv-content #toppers tr").length;
	 if (pers > 5) { 
		$('#seervertops .top-serv-header').eq(0).append('<a onclick="showtoppers();">'  + showallt +  '</a>'); 
	 }
	 var claans = $("#seervertops .top-serv-content #topclans tr").length;
	 if (claans > 5) { 
		$('#seervertops .top-serv-header').eq(1).append('<a onclick="showtopclans();">'  + showallt +  '</a>'); 
	 }
	 alltimeloaddate = new Date();
	 var ddd = $("#seervertops #toppers").html();
	 $('#ingameplayerstats #toppers').html(ddd);

	 var bbb = $("#seervertops #topclans").html();
	 $('#ingameclanstats #topclans').html(bbb);
	$('#ingameserverstats .top-serv-header a').show();
	 console.log("Updating CURRENT YEAR server stats");
		});

	}



 }

 





  if (interval == "alltime")  {
	time=new Date();
	var statspref = currentstats;
	statspref += '-alltime.txt?' + Math.random();
	var difffa = time - alltimeloaddate;
	if ((difffa > 600000) || (override === true))  {
	$("#seervertops .top-serv-content").empty();
	$("#seervertops .top-serv-content").load("//stat.petridish.pw/stats/alltime/" + statspref, function() {
	 var pers = $("#seervertops .top-serv-content #toppers tr").length;
	 if (pers > 5) { 
		$('#seervertops .top-serv-header').eq(0).append('<a onclick="showtoppers();">'  + showallt +  '</a>'); 
	 }
	 var claans = $("#seervertops .top-serv-content #topclans tr").length;
	 if (claans > 5) { 
		$('#seervertops .top-serv-header').eq(1).append('<a onclick="showtopclans();">'  + showallt +  '</a>'); 
	 }
	 alltimeloaddate = new Date();
	 var ddd = $("#seervertops #toppers").html();
	 $('#ingameplayerstats #toppers').html(ddd);

	 var bbb = $("#seervertops #topclans").html();
	 $('#ingameclanstats #topclans').html(bbb);
	$('#ingameserverstats .top-serv-header a').show();
	 console.log("Updating alltime server stats");
		});

	}



 }

}